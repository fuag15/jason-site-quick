var search_data = {"index":{"searchIndex":["ability","applicationcontroller","applicationhelper","article","articlescontroller","contactmailer","image","imagehelper","imageuploader","imagescontroller","member","pagescontroller","project","user","video","admin?()","bootstrap_class_for()","contact()","create()","create()","destroy()","destroy()","extension_white_list()","load_owner()","nav_class()","new()","owner()","owner_aware_edit_image_path()","owner_aware_images_path()","owner_aware_new_image_path()","show()","store_dir()","submit()","update()","update()","readme"],"longSearchIndex":["ability","applicationcontroller","applicationhelper","article","articlescontroller","contactmailer","image","imagehelper","imageuploader","imagescontroller","member","pagescontroller","project","user","video","user#admin?()","applicationhelper#bootstrap_class_for()","contactmailer#contact()","articlescontroller#create()","imagescontroller#create()","articlescontroller#destroy()","imagescontroller#destroy()","imageuploader#extension_white_list()","imagescontroller#load_owner()","applicationhelper#nav_class()","ability::new()","image#owner()","imagehelper#owner_aware_edit_image_path()","imagehelper#owner_aware_images_path()","imagehelper#owner_aware_new_image_path()","imagescontroller#show()","imageuploader#store_dir()","pagescontroller#submit()","articlescontroller#update()","imagescontroller#update()",""],"info":[["Ability","","Ability.html","","<p>This class controls who can or can not manage models or read which routes\non a failure it throws a CanCan::Access …\n"],["ApplicationController","","ApplicationController.html","","<p>On Can Can Access Denied we send to root page see Ability\n"],["ApplicationHelper","","ApplicationHelper.html","","<p>class for heling all views in the application helps determine what route is\nactive as well as what class …\n"],["Article","","Article.html","","<p>this class serves as our basic blog post it has two vals and a relationship\n<p>name &mdash; The title of the blog …\n"],["ArticlesController","","ArticlesController.html","","<p>Controller for Blog Posts, only admins can edit or create them See Article\nfor more info on model does …\n"],["ContactMailer","","ContactMailer.html","","<p>Simple mailer that will do all our mails to midgard production this mailer\nis only used in PagesController#contact …\n"],["Image","","Image.html","","<p>this is our image class for blog posts and projects, it has 3 attributes\n<p>file &mdash; Where we will mount ImageUploader …\n"],["ImageHelper","","ImageHelper.html","","<p>this module helpes Image Pages by smartly determining the route for an\nimages owner this is required …\n"],["ImageUploader","","ImageUploader.html","","<p>this uploader is used to mount images on\n<p>Article\n<p>Project\n"],["ImagesController","","ImagesController.html","","<p>this controller handles images for both Article and Project otherwise it is\nstandard crud\n"],["Member","","Member.html","","<p>This class is used to associate members of projects they give their real\nlife name and get associated …\n"],["PagesController","","PagesController.html","","<p>this is a catch all class for our static routes\n<p>index &mdash; Splash type page\n<p>contact &mdash; Simple contact form\n"],["Project","","Project.html","","<p>this model is to keep track fo a description, name, and members of each\nproject can also have images …\n"],["User","","User.html","","<p>this class holds our users, right now only one and only an admin usese\ndevise junks for the rest along …\n"],["Video","","Video.html","","<p>This model handles storage and ranking of Vimei embeeded videos It belongs\nto either Article and Project …\n"],["admin?","User","User.html#method-i-admin-3F","()","<p>Simple function to test if our user is an admin returns true if admin\n"],["bootstrap_class_for","ApplicationHelper","ApplicationHelper.html#method-i-bootstrap_class_for","(flash_type)","<p>helper class to return the right bootstrap display class for rails flash\ntypes\n"],["contact","ContactMailer","ContactMailer.html#method-i-contact","(from, text)","<p>default sends from contact@midgardproductions.com but auto replies to the\nsender\n<p>from &mdash; should be the sender …\n"],["create","ArticlesController","ArticlesController.html#method-i-create","()","<p>simple create method on true sends a good notice\n"],["create","ImagesController","ImagesController.html#method-i-create","()","<p>create and return to a smart path based on our parent\n"],["destroy","ArticlesController","ArticlesController.html#method-i-destroy","()","<p>almost default destroy, on success sends a good message\n"],["destroy","ImagesController","ImagesController.html#method-i-destroy","()","<p>destroy and return to our parents image index path\n"],["extension_white_list","ImageUploader","ImageUploader.html#method-i-extension_white_list","()","<p>Avoid a white list of extensions which are allowed to be uploaded. For\nimages you might use something …\n"],["load_owner","ImagesController","ImagesController.html#method-i-load_owner","()","<p>we need the parent for some routes so here we do some introspection on how\nwe were called and set the …\n"],["nav_class","ApplicationHelper","ApplicationHelper.html#method-i-nav_class","(controller_needed, action_needed=nil)","<p>helper that generate a class of ‘active’ if the current route is the\ncurrent pages route you can pass …\n"],["new","Ability","Ability.html#method-c-new","(user)","<p>if a user is signed in use the signed in user else create a new user with\ndefault params\n"],["owner","Image","Image.html#method-i-owner","()","<p>helper function to find out which model is our owner returns a project\ninstance if this is owned by a …\n"],["owner_aware_edit_image_path","ImageHelper","ImageHelper.html#method-i-owner_aware_edit_image_path","(owner, image)","<p>return the right edit path since we are multi using this model\n"],["owner_aware_images_path","ImageHelper","ImageHelper.html#method-i-owner_aware_images_path","(owner)","<p>return the right index path since we are sharing this model\n"],["owner_aware_new_image_path","ImageHelper","ImageHelper.html#method-i-owner_aware_new_image_path","(owner)","<p>return the right new path needed since this is a shared model\n"],["show","ImagesController","ImagesController.html#method-i-show","()","<p>show smartly based on our parents\n"],["store_dir","ImageUploader","ImageUploader.html#method-i-store_dir","()","<p>Override the directory where uploaded files will be stored. This is a\nsensible default for uploaders …\n"],["submit","PagesController","PagesController.html#method-i-submit","()","<p>this method handles input from the contact form shoots off a mail from\nContactMailer#contact\n"],["update","ArticlesController","ArticlesController.html#method-i-update","()","<p>simple update method on success sends a good method\n"],["update","ImagesController","ImagesController.html#method-i-update","()","<p>update and return to a smart path based on our parent\n"],["README","","doc/README_rdoc.html","","<p>Jason’s Midgard Production Portfolio Site\n<p>Site to demo Midgar Productions projects etc\n<p>Dev Guidlines\n"]]}}